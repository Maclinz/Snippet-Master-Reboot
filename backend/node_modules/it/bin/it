#!/usr/bin/env node


var glob = require("glob"),
    _ = require("../lib/extended"),
    path = require("path"),
    it = require("../index"),
    Module = require("module").Module,
    _require = Module.prototype.require,
    program = require('commander'),
    coverage = {
        coverage: require("../lib/formatters/coverage"),
        coverageHtml: require("../lib/formatters/coverage-html")
    };

//ensure then we call get the same it
_(Module).extend({
    require: function require(mod) {
        if (mod === "it") {
            return it;
        } else {
            return _require.apply(this, arguments);
        }
    }
});

program
    .version(require("../package.json").version)
    .option('-e, --env [string]', 'environment')
    .option('-r, --reporter [string]', 'reporter')
    .option('-f, --filter [string]', "filter")
    .option('-c, --config <path>', 'config')
    .option('--cov-html [path]', 'create coverage output in html')
    .option('--reporters', 'display available reporters')
    .on("reporters", function () {
        console.log(["", "Reporters:", "\tspec", "\tdotmatrix", "\ttap", "\tdoc", ""].join("\n"));
        process.exit();
    })
    .parse(process.argv);

var files = program.args.length ? program.args : ["test/**/*.test.js"], filter, reporter, covType = "coverage", covOut = null;
files = _.flatten(files.map(function (f) {
    return glob.sync(f);
}));
function setupEnv(config) {
    var env = config.environment;
    if (env) {
        process.env.NODE_ENV = env;
    } else if (!process.env.NODE_ENV) {
        process.env.NODE_ENV = "test";
    }
    filter = config.filter || null;
    files = config.directory ? glob.sync(config.directory) : files;
    reporter = config.reporter || "spec";
    if (config.covHtml) {
        covType = "coverageHtml";
        if (!_.isBoolean(config.covHtml)) {
            covOut = config.covHtml;
        }
    }
}

setupEnv(program);
var configFile = program.config;

try {
    if (configFile) {
        setupEnv(require(configFile));
    } else {
        _(glob.sync("test/**/it.config.json")).map(function (f) {
            return path.resolve(f);
        }).map(function (p) {
                return require(p);
            }).forEach(setupEnv);
    }
} catch (e) {
    console.log(e.stack);
}


function runTests(files) {
    it.reporter(reporter);
    files.forEach(function (f) {
        try {
            require(f);
        } catch (e) {
            console.log(_.style(e.stack.replace(/^/gm, '  '), ["bold", "red"]));
            process.exit(1);
        }
    });
    return it.run(filter);
}

function startTests() {
    files = _(files).map(function (f) {
        return path.resolve(f);
    }).value();

    if (files.length) {
        return runTests(files);
    } else {
        console.log("No tests found");
        return _.resolve();
    }
}


var orig = process.emit;
process.emit = function (event) {
    if (event === 'exit') {
        if (typeof _$jscoverage === 'object') {
            coverage[covType].showCoverage(_$jscoverage, covOut);
        }
        orig.apply(this, arguments);
    } else {
        orig.apply(this, arguments);
    }
};
startTests().then(
    function (summary) {
        process.exit(summary.errorCount ? 1 : 0);
    },
    function (error) {
        console.log(error);
        process.exit(1);
    }
);




